#!/bin/bash
#set -vx
## build-server - Install and setup OpenVPN server
## Usage: build-server [-i|--init]
##   -i/--init: (re)initialize configuration (wipe all old keys/certificates)

[[ $- == *i* ]] && echo "ABORT: run as script, don't source" && return 1
((EUID)) && echo "ABORT: must have root privileges" && exit 2
self=$(readlink -e "$0") dir=${self%/*}

StopOpenVPN(){ ## Stop server in case it's running
	echo "Stopping OpenVPN server if it's running"
	[[ -x /bin/systemctl ]] && systemctl stop openvpn@server ||
		service openvpn stop
}

## Required packages
apt install openvpn easy-rsa
## Fix bug in pkitool
sed -i 's/KEY_ALTNAMES="$KEY_CN"/KEY_ALTNAMES="DNS:$KEY_CN"/g' \
		/usr/share/easy-rsa/pkitool

## Set variables
source "$dir/vars"
[[ $LANPORT ]] || LANPORT=1194
getroute=($(ip route get 8.8.8.8))
[[ $DEV ]] || DEV=${getroute[4]}
[[ $GW ]] || GW=${getroute[2]}
[[ $LANIP ]] || LANIP==${getroute[6]}
[[ $MASK ]] || MASK=$(ifconfig $DEV |sed 's/^.*Mask://' |grep '^[0-9.]*.$')
IFS=. read -r i1 i2 i3 i4 <<<"$LANIP"
IFS=. read -r m1 m2 m3 m4 <<<"$MASK"
net=$((i1&m1)).$((i2&m2)).$((i3&m3)).$((i4&m4))
echo "Using device $DEV with IP $LANIP mask $MASK through $GW"

index="$KEY_DIR/index.txt"
serial="$KEY_DIR/serial"
conf="$CONF/$KEY_NAME.conf"

dh="$KEY_DIR/dh$KEY_SIZE.pem"
ta="$KEY_DIR/ta.key"
ca="$KEY_DIR/ca.crt"
crt="$KEY_DIR/$KEY_NAME.crt"
key="$KEY_DIR/$KEY_NAME.key"

ldh="$CONF/${dh##*/}"
lta="$CONF/${ta##*/}"
lca="$CONF/${ca##*/}"
lcrt="$CONF/${crt##*/}"
lkey="$CONF/${key##*/}"

## Check for non-links in $CONF
if [[ -a "$lca" ]]
then
	[[ ! -L "$ldh" ]] && echo "ABORT: $ldh no link" && exit 3
	[[ ! -L "$lta" ]] && echo "ABORT: $lta no link" && exit 4
	[[ ! -L "$lca" ]] && echo "ABORT: $lca no link" && exit 5
	[[ ! -L "$lcrt" ]] && echo "ABORT: $lcrt no link" && exit 6
	[[ ! -L "$lkey" ]] && echo "ABORT: $lkey no link" && exit 7
fi

DHCP=
for dhcp in $DNS
do
	[[ $dhcp = LOCAL ]] && dhcp="$GW"
	[[ $dhcp ]] && DHCP+="push \"dhcp-option DNS $dhcp\""$'\n'
done

read -rd '' config <<-EOF
	dev tun
	proto udp
	port $LANPORT
	ca "$ca"
	cert "$crt"
	key "$key"
	dh "$dh"
	## server and client tun net
	server 10.8.0.0 255.255.255.0
	ifconfig 10.8.0.1 10.8.0.2
	push "route 10.8.0.1 255.255.255.255"
	push "route 10.8.0.0 255.255.255.0"
	push "route $net $MASK"
	${DHCP}push "redirect-gateway def1"
	client-to-client
	duplicate-cn
	keepalive 10 120
	tls-version-min 1.2
	tls-auth "$ta" 0
	cipher AES-256-CBC
	auth SHA256
	comp-lzo
	user nobody
	group nogroup
	persist-key
	persist-tun
	; crl-verify "$CONF/crl.pem"
	status "$CONF/status.log" 20
	log "$CONF/openvpn.log"
	verb 4
EOF

if [[ $1 = -i || $1 = --init ]]
then
	read -p "Wiping '$KEY_DIR' and initializing, Ctrl-C to abort, Enter if OK "
	StopOpenVPN
	rm -rf "$KEY_DIR"
	mkdir -p "$KEY_DIR"
	chmod go-rwx "$KEY_DIR"
	touch "$index"
	echo 01 >"$serial"
	"$OPENSSL" dhparam -out "$dh" "$KEY_SIZE"
	openvpn --genkey --secret "$ta"
	"$EASY_RSA/pkitool" --initca
	"$EASY_RSA/pkitool" --server "$KEY_NAME"
	echo "$config" >"$conf"
	exit 0
fi

read -p "Writing configuration files, Ctrl-C to abort, Enter if OK "
StopOpenVPN
mkdir -p "$KEY_DIR"
chmod go-rwx "$KEY_DIR"
! [[ -f "$index" ]] && touch "$index"
! [[ -f "$serial" ]] && echo 01 >"$serial"
! [[ -f "$dh" ]] && "$OPENSSL" dhparam -out "$dh" "$KEY_SIZE"
! [[ -f "$ta" ]] && openvpn --genkey --secret "$ta"
! [[ -f "$ca" ]] && "$EASY_RSA/pkitool" --initca
! [[ -f "$crt" && -f "$key" ]] && "$EASY_RSA/pkitool" --server "$KEY_NAME"
! [[ -f "$conf" ]] && echo "$config" >"$conf"

! ln -sf "$dh" $CONF/ &&
	echo "ABORT: can't create link for $dh in $CONF" && exit 8
! ln -sf "$ta" $CONF/ &&
	echo "ABORT: can't create link for $ta in $CONF" && exit 9
! ln -sf "$ca" $CONF/ &&
	echo "ABORT: can't create link for $ca in $CONF" && exit 10
! ln -sf "$crt" $CONF/ &&
	echo "ABORT: can't create link for $crt in $CONF" && exit 11
! ln -sf "$key" $CONF/ &&
	echo "ABORT: can't create link for $key in $CONF" && exit 12

## Allow for more client certificates
sed -i 's/unique_subject = yes/unique_subject = no/' "$KEY_DIR/index.txt.attr"

## Set IPv4 forwarding on the server
sed -i 's/^#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
sysctl -p

## Start server
read -p "Starting OpenVPN and set to autostart, Ctrl-C to abort, Enter if OK "
if [[ -x /bin/systemctl ]]
then
	systemctl start openvpn@server
	systemctl enable openvpn@server
else
	## Remove incompatible option :-(
	sed -i 's/^tls-version-min 1.2/; tls-version-min 1.2/' "$conf"
	service openvpn start
	update-rc.d openvpn enable
fi

exit 0
